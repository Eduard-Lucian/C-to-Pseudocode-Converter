#ifndef CALENDARDATE_H
#define CALENDARDATE_H

#include <string>
#include <iostream>
#include <sstream>
#include <vector>

class CalendarDate {
private:
    int day;
    int month;
    int year;

    static const std::vector<int> daysInMonth;

    bool isLeapYear(int year) const;
    int getDayOfYear() const;

public:
    CalendarDate(std::string dateStr);
    CalendarDate(int dayOfYear, int year);

    bool isValid() const;
    int getDay() const;
    int getMonth() const;
    int getYear() const;
    int getDayOfYear() const;
    void setDay(int day);
    void setMonth(int month);
    void setYear(int year);
    void displayDate() const;
};

#endif // CALENDARDATE_H


#include "CalendarDate.h"

const std::vector<int> CalendarDate::daysInMonth = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };

CalendarDate::CalendarDate(std::string dateStr) {
    std::istringstream stream(dateStr);
    std::string token;

    std::getline(stream, token, '/');
    day = std::stoi(token);

    std::getline(stream, token, '/');
    month = 0;
    std::vector<std::string> months = { "ianuarie", "februarie", "martie", "aprilie", "mai", "iunie", "iulie", "august", "septembrie", "octombrie", "noiembrie", "decembrie" };
    for (int i = 0; i < 12; i++) {
        if (token == months[i]) {
            month = i + 1;
            break;
        }
    }

    std::getline(stream, token);
    year = std::stoi(token);
}

CalendarDate::CalendarDate(int dayOfYear, int year) {
    this->year = year;
    int monthCounter = 0;
    int daysRemaining = dayOfYear;

    while (daysRemaining > daysInMonth[monthCounter]) {
        daysRemaining -= daysInMonth[monthCounter];
        monthCounter++;
    }

    month = monthCounter + 1;
    day = daysRemaining;
}

bool CalendarDate::isLeapYear(int year) const {
    return (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));
}

int CalendarDate::getDayOfYear() const {
    int dayOfYear = day;
    for (int i = 0; i < month - 1; i++) {
        dayOfYear += daysInMonth[i];
    }

    if (month > 2 && isLeapYear(year)) {
        dayOfYear++;
    }

    return dayOfYear;
}

bool CalendarDate::isValid() const {
    if (month < 1 || month > 12) return false;
    if (day < 1 || day > daysInMonth[month - 1]) return false;
    if (month == 2 && day == 29 && !isLeapYear(year)) return false;

    return true;
}

int CalendarDate::getDay() const {
    return day;
}

int CalendarDate::getMonth() const {
    return month;
}

int CalendarDate::getYear() const {
    return year;
}

void CalendarDate::setDay(int day) {
    this->day = day;
}

void CalendarDate::setMonth(int month) {
    this->month = month;
}

void CalendarDate::setYear(int year) {
    this->year = year;
}

void CalendarDate::displayDate() const {
    std::cout << day << "/" << month << "/" << year << std::endl;
}





#ifndef ACTIVITY_H
#define ACTIVITY_H

#include <string>

class Activity {
private:
    std::string description;

public:
    Activity(std::string description);

    std::string getDescription() const;
};

#endif // ACTIVITY_H




#include "Activity.h"

Activity::Activity(std::string description) {
    this->description = description;
}

std::string Activity::getDescription() const {
    return description;
}




#ifndef DATEENTRY_H
#define DATEENTRY_H

#include "CalendarDate.h"
#include "Activity.h"
#include <vector>

class DateEntry {
private:
    CalendarDate date;
    std::vector<Activity> activities;

public:
    DateEntry(CalendarDate date);
    void addActivity(const Activity& activity);
    void displayActivities() const;
    CalendarDate getDate() const;
};

#endif // DATEENTRY_H





#include "DateEntry.h"

DateEntry::DateEntry(CalendarDate date) : date(date) {}

void DateEntry::addActivity(const Activity& activity) {
    activities.push_back(activity);
}

void DateEntry::displayActivities() const {
    std::cout << "Activitățile pentru data " << date.getDay() << "/" << date.getMonth() << "/" << date.getYear() << ":\n";
    for (const auto& activity : activities) {
        std::cout << " - " << activity.getDescription() << std::endl;
    }
}

CalendarDate DateEntry::getDate() const {
    return date;
}





#ifndef ELECTRONICAGENDA_H
#define ELECTRONICAGENDA_H

#include "DateEntry.h"
#include <vector>

class ElectronicAgenda {
private:
    std::vector<DateEntry> entries;

public:
    void addEntry(DateEntry& entry);
    DateEntry* getEntryForDate(const CalendarDate& date);
};

#endif // ELECTRONICAGENDA_H





#include "ElectronicAgenda.h"

void ElectronicAgenda::addEntry(DateEntry& entry) {
    entries.push_back(entry);
}

DateEntry* ElectronicAgenda::getEntryForDate(const CalendarDate& date) {
    for (auto& entry : entries) {
        if (entry.getDate().getDay() == date.getDay() && entry.getDate().getMonth() == date.getMonth() && entry.getDate().getYear() == date.getYear()) {
            return &entry;
        }
    }
    return nullptr;
}






#include <iostream>
#include "ElectronicAgenda.h"
#include "CalendarDate.h"
#include "Activity.h"

void displayMenu() {
    std::cout << "1. Adaugă activitate la o dată\n";
    std::cout << "2. Vizualizează activitățile dintr-o zi\n";
    std::cout << "3. Ieși\n";
    std::cout << "Alege opțiunea: ";
}

int main() {
    ElectronicAgenda agenda;
    int choice;

    while (true) {
        displayMenu();
        std::cin >> choice;
        std::cin.ignore(); // pentru a ignora eventualele caractere de la finalul inputului

        if (choice == 1) {
            // Adăugarea unei activități
            std::string dateStr, description;
            std::cout << "Introduceți data (ex: 12/martie/2024): ";
            std::getline(std::cin, dateStr);
            CalendarDate date(dateStr);

            if (!date.isValid()) {
                std::cout << "Data nu este validă!\n";
                continue;
            }

            DateEntry* entry = agenda.getEntryForDate(date);
            if (!entry) {
                entry = new DateEntry(date);
                agenda.addEntry(*entry);
            }

            std::cout << "Introduceți descrierea activității: ";
            std::getline(std::cin, description);

            Activity activity(description);
            entry->addActivity(activity);

            std::cout << "Activitatea a fost adăugată!\n";
        }
        else if (choice == 2) {
            // Vizualizarea activităților dintr-o zi
            std::string dateStr;
            std::cout << "Introduceți data (ex: 12/martie/2024): ";
            std::getline(std::cin, dateStr);
            CalendarDate date(dateStr);

            if (!date.isValid()) {
                std::cout << "Data nu este validă!\n";
                continue;
            }

            DateEntry* entry = agenda.getEntryForDate(date);
            if (entry) {
                entry->displayActivities();
            } else {
                std::cout << "Nu există activități pentru această dată.\n";
            }
        }
        else if (choice == 3) {
            std::cout << "Ieșire din program.\n";
            break;
        }
        else {
            std::cout << "Opțiune invalidă! Încercați din nou.\n";
        }
    }

    return 0;
}








